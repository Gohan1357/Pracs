#RSA-1 


import random

# Step 1: Choose two large prime numbers, p and q
def generate_large_primes(bits):
    while True:
        num = random.getrandbits(bits)
        if is_prime(num):
            return num

def is_prime(num):
    if num <= 1:
        return False
    if num <= 3:
        return True
    if num % 2 == 0 or num % 3 == 0:
        return False
    i = 5
    while i * i <= num:
        if num % i == 0 or num % (i + 2) == 0:
            return False
        i += 6
    return True

# Step 2: Compute n = p * q and Euler's totient function phi(n)
def compute_n_phi(p, q):
    n = p * q
    phi = (p - 1) * (q - 1)
    return n, phi

# Step 3: Choose an encryption key e (public key)
def choose_public_key(phi):
    while True:
        e = random.randint(2, phi - 1)
        if gcd(e, phi) == 1:
            return e

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

# Step 4: Compute the modular multiplicative inverse d (private key)
def compute_private_key(e, phi):
    d = mod_inverse(e, phi)
    return d

def mod_inverse(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        m, a = a % m, m
        x0, x1 = x1 - q * x0, x0
    return x1 + m0 if x1 < 0 else x1

# Step 5: Encryption and Decryption
def encrypt(message, e, n):
    ciphertext = [pow(ord(char), e, n) for char in message]
    return ciphertext

def decrypt(ciphertext, d, n):
    plaintext = ''.join([chr(pow(char, d, n)) for char in ciphertext])
    return plaintext

if __name__ == '__main__':
    bits = 16  # Adjust the number of bits for larger primes
    p = generate_large_primes(bits)
    q = generate_large_primes(bits)
    
    n, phi = compute_n_phi(p, q)
    
    e = choose_public_key(phi)
    d = compute_private_key(e, phi)
    
    message = input("Enter a message to encrypt: ")
    
    ciphertext = encrypt(message, e, n)
    print("Encrypted message:", ciphertext)
    
    decrypted_message = decrypt(ciphertext, d, n)
    print("Decrypted message:", decrypted_message)
